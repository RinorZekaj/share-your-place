{"version":3,"sources":["shared/context/auth-context.js","shared/components/UIElements/LoadingSpinner.js","shared/components/UIElements/Backdrop.js","shared/components/Navigation/MainHeader.js","shared/components/Navigation/NavLinks.js","shared/components/Navigation/SideDrawer.js","shared/components/Navigation/MainNavigation.js","shared/hooks/auth-hook.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","createContext","isLoggedIn","userID","token","login","logout","LoadingSpinner","props","className","asOverlay","Backdrop","ReactDOM","createPortal","onClick","document","getElementById","MainHeader","children","NavLinks","auth","useContext","to","exact","SideDrawer","content","CSSTransition","in","show","timeout","classNames","mountOnEnter","unmountOnExit","MainNavigation","logoutTimer","useState","openDrawer","setOpenDrawer","Users","React","lazy","NewPlace","UserPlaces","UpdatePlace","Auth","App","routes","setToken","tokenExpirationDate","setTokenExpirationDate","userId","setUserId","useCallback","uid","expirationDate","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","removeItem","useEffect","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem","useAuth","path","Provider","value","fallback","Boolean","window","location","hostname","match","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7416c8b8.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const AuthContext = createContext({\r\n  isLoggedIn: false,\r\n  userID: null,\r\n  token: null,\r\n  login: () => {},\r\n  logout: () => {},\r\n});\r\n","import React from 'react';\r\n\r\nimport './LoadingSpinner.css';\r\n\r\nconst LoadingSpinner = props => {\r\n  return (\r\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\r\n      <div className=\"lds-dual-ring\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./Backdrop.css\";\r\n\r\nfunction Backdrop(props) {\r\n  return ReactDOM.createPortal(\r\n    <div className=\"backdrop\" onClick={props.onClick}></div>,\r\n    document.getElementById(\"backdrop-hook\")\r\n  );\r\n}\r\n\r\nexport default Backdrop;\r\n","import React from \"react\";\r\n\r\nimport \"./MainHeader.css\";\r\n\r\nfunction MainHeader(props) {\r\n  return <header className=\"main-header\">{props.children}</header>;\r\n}\r\n\r\nexport default MainHeader;\r\n","import React, { useContext } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { AuthContext } from '../../context/auth-context'\r\n\r\nimport './NavLinks.css'\r\n\r\nfunction NavLinks(props) {\r\n  const auth = useContext(AuthContext)\r\n\r\n  return (\r\n    <ul className=\"nav-links\">\r\n      <li>\r\n        <NavLink to=\"/\" exact>ALL USERS</NavLink>\r\n      </li>\r\n      {auth.isLoggedIn && <li>\r\n        <NavLink to={`/${auth.userID}/places`}>MY PLACES</NavLink>\r\n      </li>}\r\n      {auth.isLoggedIn && <li>\r\n        <NavLink to=\"/places/new\">ADD PLACE</NavLink>\r\n      </li>}\r\n      {!auth.isLoggedIn && <li>\r\n        <NavLink to=\"/auth\">AUTHENTICATE</NavLink>\r\n      </li>}\r\n      {auth.isLoggedIn &&<li>\r\n        <button onClick={auth.logout}>LOGOUT</button>\r\n      </li>}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default NavLinks\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nimport \"./SideDrawer.css\";\r\n\r\nfunction SideDrawer(props) {\r\n  const content = (\r\n    <CSSTransition\r\n      in={props.show}\r\n      timeout={200}\r\n      classNames=\"slide-in-left\"\r\n      mountOnEnter\r\n      unmountOnExit\r\n    >\r\n      <aside className=\"side-drawer\" onClick={props.onClick}>{props.children}</aside>\r\n    </CSSTransition>\r\n  );\r\n\r\n  return ReactDOM.createPortal(content, document.getElementById(\"drawer-hook\"));\r\n}\r\n\r\nexport default SideDrawer;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Backdrop from \"../UIElements/Backdrop\";\r\n\r\nimport MainHeader from \"./MainHeader\";\r\nimport \"./MainNavigation.css\";\r\nimport NavLinks from \"./NavLinks\";\r\nimport SideDrawer from \"./SideDrawer\";\r\n\r\nfunction MainNavigation() {\r\n  const [openDrawer, setOpenDrawer] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      {openDrawer && <Backdrop onClick={() => setOpenDrawer(false)} />}\r\n      <SideDrawer show={openDrawer} onClick={() => setOpenDrawer(false)}>\r\n        <nav className=\"main-navigation__drawer-nav\">\r\n          <NavLinks />\r\n        </nav>\r\n      </SideDrawer>\r\n      <MainHeader>\r\n        <button\r\n          className=\"main-navigation__menu-btn\"\r\n          onClick={() => setOpenDrawer(true)}\r\n        >\r\n          <span />\r\n          <span />\r\n          <span />\r\n        </button>\r\n        <h1 className=\"main-navigation__title\">\r\n          <Link to=\"/\">YourPlaces</Link>\r\n        </h1>\r\n        <nav className=\"main-navigation__header-nav\">\r\n          <NavLinks />\r\n        </nav>\r\n      </MainHeader>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MainNavigation;\r\n","import { useState, useCallback, useEffect } from 'react'\r\n\r\nlet logoutTimer;\r\n\r\nexport const useAuth = () => {\r\n  const [token, setToken] = useState(false);\r\n  const [tokenExpirationDate, setTokenExpirationDate] = useState();\r\n  const [userId, setUserId] = useState(null);\r\n\r\n  const login = useCallback((uid, token, expirationDate) => {\r\n    setToken(token);\r\n    setUserId(uid);\r\n    const tokenExpirationDate =\r\n      expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\r\n    setTokenExpirationDate(tokenExpirationDate);\r\n    localStorage.setItem(\r\n      \"userData\",\r\n      JSON.stringify({\r\n        userId: uid,\r\n        token: token,\r\n        expiration: tokenExpirationDate.toISOString(),\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const logout = useCallback((uid) => {\r\n    setToken(null);\r\n    setUserId(uid);\r\n    setTokenExpirationDate(null);\r\n    localStorage.removeItem(\"userData\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (token && tokenExpirationDate) {\r\n      const remainingTime =\r\n        tokenExpirationDate.getTime() - new Date().getTime();\r\n      logoutTimer = setTimeout(logout, remainingTime);\r\n    } else {\r\n      clearTimeout(logoutTimer);\r\n    }\r\n  }, [token, logout, tokenExpirationDate]);\r\n\r\n  useEffect(() => {\r\n    const storedData = JSON.parse(localStorage.getItem(\"userData\"));\r\n    if (\r\n      storedData &&\r\n      storedData.token &&\r\n      new Date(storedData.expiration) > new Date()\r\n    ) {\r\n      login(\r\n        storedData.userId,\r\n        storedData.token,\r\n        new Date(storedData.expiration)\r\n      );\r\n    }\r\n  }, [login]);\r\n\r\n  return { token, login, logout, userId }\r\n};\r\n","import React, { Suspense } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\n\nimport \"./App.css\";\n// import Users from \"./user/pages/Users\";\n// import NewPlace from \"./places/pages/NewPlace\";\n// import UserPlaces from \"./places/pages/UserPlaces\";\n// import UpdatePlace from \"./places/pages/UpdatePlace\";\n// import Auth from \"./user/pages/Auth\";\nimport MainNavigation from \"./shared/components/Navigation/MainNavigation\";\nimport LoadingSpinner from \"./shared/components/UIElements/LoadingSpinner\";\nimport { AuthContext } from \"./shared/context/auth-context\";\nimport { useAuth } from \"./shared/hooks/auth-hook\";\n\nconst Users = React.lazy(() => import(\"./user/pages/Users\"));\nconst NewPlace = React.lazy(() => import(\"./places/pages/NewPlace\"));\nconst UserPlaces = React.lazy(() => import(\"./places/pages/UserPlaces\"));\nconst UpdatePlace = React.lazy(() => import(\"./places/pages/UpdatePlace\"));\nconst Auth = React.lazy(() => import(\"./user/pages/Auth\"));\n\nfunction App() {\n  const { token, login, logout, userId } = useAuth();\n\n  let routes;\n\n  if (token) {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/:userID/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/places/new\">\n          <NewPlace />\n        </Route>\n        <Route path=\"/places/:placeId\">\n          <UpdatePlace />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/:userID/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/auth\" exact>\n          <Auth />\n        </Route>\n        <Redirect to=\"/auth\" />\n      </Switch>\n    );\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn: !!token,\n        token: token,\n        login: login,\n        logout: logout,\n        userID: userId,\n      }}\n    >\n      <Router>\n        <MainNavigation />\n        <main>\n          <Suspense\n            fallback={\n              <div>\n                <LoadingSpinner />\n              </div>\n            }\n          >\n            {routes}\n          </Suspense>\n        </main>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}